{"version":3,"file":"876-9411b9298d82c2359714.js","mappings":"8GAKIA,E,2DAEJ,IAmJMC,GAAQ,OAAO,QAAP,sBAAH,yEAMX,UAzJuB,WACrB,OAAwBC,EAAAA,EAAAA,UAAe,IAAIC,IAAJ,CAASC,EAAAA,IAAzCC,EAAP,KAAaC,EAAb,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAA9BK,EAAP,KAAeC,EAAf,KACMC,EAAW,EACf,kBAAQC,MAAM,OAAOC,KAAM,GAA3B,SAMF,GAA4CT,EAAAA,EAAAA,UAAwBO,GAA7DG,EAAP,KAAuBC,EAAvB,KAGA,GAAgDX,EAAAA,EAAAA,UAAS,IAAlDY,EAAP,KAAyBC,EAAzB,KACMC,GAAWC,EAAAA,EAAAA,QAAyB,OAE1CC,EAAAA,EAAAA,YAAU,WACRb,EAAKc,GAAG,OAAQX,GAChBH,EAAKc,GAAG,QAAQ,SAAAC,GACdA,EAAKC,OAAOrB,EAAa,CAAEsB,WAAY,aAExC,CAACjB,KAOJa,EAAAA,EAAAA,YAAU,WACRK,UAAUC,aACPC,mBACAC,MAAK,SAAAC,GACJ,IAAMC,EAAiC,GACjCC,EAAkC,GAClCC,EAAiC,GAEvCH,EAAQI,SAAQ,SAACC,EAAQC,GACvB,IAAQC,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,SACTC,GACJ,kBAAQ1B,MAAOyB,EAAUxB,IAAKsB,GAC3BC,GAIL,OAAQF,EAAOK,MACb,IAAK,aACHT,EAAgBU,KAAKF,GACrB,MAEF,IAAK,cACHP,EAAiBS,KAAKF,GACtB,MAEF,IAAK,aACHN,EAAgBQ,KAAKF,OAO3BvB,EAAkBiB,MAEnBS,MAAMC,QAAQC,SAChB,IAkDH,OAxBAvB,EAAAA,EAAAA,YAAU,WACR,IAAMwB,EAAsC,CAI1CC,OAAO,EACPC,MAAO,CACLT,SAAUrB,EACV+B,UAAW,GACXC,OAAQ,IACRC,MAAO,MAIXxB,UAAUC,aACPwB,aAAaN,GACbhB,MAAK,SAAAuB,GACJjD,EAAciD,EACTjC,EAASkC,UACdlC,EAASkC,QAAQC,UAAYF,MAE9BV,MAAMC,QAAQC,SAChB,CAAC3B,KAGF,yBACE,oBACE,QAACb,EAAD,CAAOmD,UAAQ,EAACC,OAAK,EAACC,aAAW,EAACC,IAAKvC,MAczC,oBACE,sCACA,kBAAQwC,SA/CV,SAAAC,IApBwB,SAC1BA,EACAC,GAEA,IAAMC,EAASF,EAAGE,OACZ1B,EAAQ0B,EAAOC,cAErBF,EADcC,EAAOE,QAAQ5B,GAAOvB,OAepCoD,CAAoBL,EAAI1C,KA+CjBH,KAGL,oBACE,gCAAgBL,KAElB,oBACE,kBAAQwD,QAtHuD,WACnE1D,EAAK2D,UACL1D,EAAQ,IAAIH,IAAJ,CAASI,EAAQH,EAAAA,MAoHrB","sources":["webpack://ugonf/./src/components/loadable/receive.tsx"],"sourcesContent":["import styled from \"@emotion/styled\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport Peer from \"skyway-js\"\nimport { peerOptions } from \"../../utils/skyway\"\n\nlet localStream: MediaStream\n\nconst App: React.VFC = () => {\n  const [peer, setPeer] = useState<Peer>(new Peer(peerOptions))\n  const [peerId, setPeerId] = useState(\"\")\n  const listInit = [\n    <option value=\"null\" key={-1}>\n      null\n    </option>,\n  ]\n  // const [audioInputList, setAudioInputList] = useState<JSX.Element[]>(listInit);\n  // const [audioOutputList, setAudioOutputList] = useState<JSX.Element[]>(listInit);\n  const [videoInputList, setVideoInputList] = useState<JSX.Element[]>(listInit)\n  // const [audioInputDevice, setAudioInputDevice] = useState(\"\");\n  // const [audioOutputDevice, setAudioOutputDevice] = useState(\"\");\n  const [videoInputDevice, setVideoInputDevice] = useState(\"\")\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  useEffect(() => {\n    peer.on(\"open\", setPeerId)\n    peer.on(\"call\", conn => {\n      conn.answer(localStream, { videoCodec: \"VP9\" })\n    })\n  }, [peer])\n\n  const clickGoStreamBtn: React.MouseEventHandler<HTMLButtonElement> = () => {\n    peer.destroy()\n    setPeer(new Peer(peerId, peerOptions))\n  }\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .enumerateDevices()\n      .then(devices => {\n        const $audioInputList: JSX.Element[] = []\n        const $audioOutputList: JSX.Element[] = []\n        const $videoInputList: JSX.Element[] = []\n\n        devices.forEach((device, index) => {\n          const { label, deviceId } = device\n          const option = (\n            <option value={deviceId} key={index}>\n              {label}\n            </option>\n          )\n\n          switch (device.kind) {\n            case \"audioinput\":\n              $audioInputList.push(option)\n              break\n\n            case \"audiooutput\":\n              $audioOutputList.push(option)\n              break\n\n            case \"videoinput\":\n              $videoInputList.push(option)\n              break\n          }\n        })\n\n        // setAudioInputList($audioInputList)\n        // setAudioOutputList($audioOutputList)\n        setVideoInputList($videoInputList)\n      })\n      .catch(console.error)\n  }, [])\n\n  const changeSelectHandler = (\n    ev: React.ChangeEvent<HTMLSelectElement>,\n    setState: React.Dispatch<React.SetStateAction<string>>\n  ) => {\n    const target = ev.target\n    const index = target.selectedIndex\n    const value = target.options[index].value\n    setState(value)\n  }\n\n  // const changeAudioInputDeviceHandler: React.ChangeEventHandler<HTMLSelectElement> = (ev) => {\n  //   changeSelectHandler(ev, setAudioInputDevice)\n  // }\n\n  // const changeAudioOutputDeviceHandler: React.ChangeEventHandler<HTMLSelectElement> = (ev) => {\n  //   changeSelectHandler(ev, setAudioOutputDevice)\n  // }\n\n  const changeVideoInputDeviceHandler: React.ChangeEventHandler<\n    HTMLSelectElement\n  > = ev => {\n    changeSelectHandler(ev, setVideoInputDevice)\n  }\n\n  useEffect(() => {\n    const constraints: MediaStreamConstraints = {\n      // audio: {\n      //   deviceId: audioInputDevice,\n      // },\n      audio: false,\n      video: {\n        deviceId: videoInputDevice,\n        frameRate: 30,\n        height: 720,\n        width: 960,\n      },\n    }\n\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(stream => {\n        localStream = stream\n        if (!videoRef.current) return\n        videoRef.current.srcObject = stream\n      })\n      .catch(console.error)\n  }, [videoInputDevice])\n\n  return (\n    <>\n      <div>\n        <Video autoPlay muted playsInline ref={videoRef} />\n      </div>\n      {/* <div>\n        <span>Audio Input (dev): </span>\n        <select onChange={changeAudioInputDeviceHandler}>\n          {audioInputList}\n        </select>\n      </div>\n      <div>\n        <span>Audio Output (dev): </span>\n        <select onChange={changeAudioOutputDeviceHandler}>\n          {audioOutputList}\n        </select>\n      </div> */}\n      <div>\n        <span>Video Input: </span>\n        <select onChange={changeVideoInputDeviceHandler}>\n          {videoInputList}\n        </select>\n      </div>\n      <div>\n        <span>Peer ID: {peerId}</span>\n      </div>\n      <div>\n        <button onClick={clickGoStreamBtn}>GoStream</button>\n      </div>\n    </>\n  )\n}\n\nconst Video = styled(\"video\")`\n  background-color: #000;\n  width: 960px;\n  height: 720px;\n`\n\nexport default App\n"],"names":["localStream","Video","useState","Peer","peerOptions","peer","setPeer","peerId","setPeerId","listInit","value","key","videoInputList","setVideoInputList","videoInputDevice","setVideoInputDevice","videoRef","useRef","useEffect","on","conn","answer","videoCodec","navigator","mediaDevices","enumerateDevices","then","devices","$audioInputList","$audioOutputList","$videoInputList","forEach","device","index","label","deviceId","option","kind","push","catch","console","error","constraints","audio","video","frameRate","height","width","getUserMedia","stream","current","srcObject","autoPlay","muted","playsInline","ref","onChange","ev","setState","target","selectedIndex","options","changeSelectHandler","onClick","destroy"],"sourceRoot":""}